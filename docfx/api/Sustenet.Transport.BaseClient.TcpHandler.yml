### YamlMime:ManagedReference
items:
- uid: Sustenet.Transport.BaseClient.TcpHandler
  commentId: T:Sustenet.Transport.BaseClient.TcpHandler
  id: BaseClient.TcpHandler
  parent: Sustenet.Transport
  children:
  - Sustenet.Transport.BaseClient.TcpHandler.Connect(Sustenet.Transport.BaseClient,System.Net.IPAddress,System.UInt16)
  - Sustenet.Transport.BaseClient.TcpHandler.ConnectCallback(System.IAsyncResult,System.Net.IPAddress)
  - Sustenet.Transport.BaseClient.TcpHandler.Dispose
  - Sustenet.Transport.BaseClient.TcpHandler.Dispose(System.Boolean)
  - Sustenet.Transport.BaseClient.TcpHandler.Receive(Sustenet.Transport.BaseClient,System.Net.Sockets.TcpClient)
  - Sustenet.Transport.BaseClient.TcpHandler.ReceiveCallback(System.IAsyncResult)
  langs:
  - csharp
  - vb
  name: BaseClient.TcpHandler
  nameWithType: BaseClient.TcpHandler
  fullName: Sustenet.Transport.BaseClient.TcpHandler
  type: Class
  source:
    remote:
      path: src/Transport/BaseClient.cs
      branch: production-prep
      repo: git@github.com:Quaint-Studios/Sustenet.git
    id: TcpHandler
    path: src/Transport/BaseClient.cs
    startLine: 60
  assemblies:
  - Sustenet
  namespace: Sustenet.Transport
  summary: "\nHandles events for connecting, receiving, and debugging.\nAlso controls the socket connection.\n"
  example: []
  syntax:
    content: 'public class TcpHandler : IDisposable'
    content.vb: >-
      Public Class TcpHandler
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sustenet.Transport.BaseClient.TcpHandler.Receive(Sustenet.Transport.BaseClient,System.Net.Sockets.TcpClient)
  commentId: M:Sustenet.Transport.BaseClient.TcpHandler.Receive(Sustenet.Transport.BaseClient,System.Net.Sockets.TcpClient)
  id: Receive(Sustenet.Transport.BaseClient,System.Net.Sockets.TcpClient)
  parent: Sustenet.Transport.BaseClient.TcpHandler
  langs:
  - csharp
  - vb
  name: Receive(BaseClient, TcpClient)
  nameWithType: BaseClient.TcpHandler.Receive(BaseClient, TcpClient)
  fullName: Sustenet.Transport.BaseClient.TcpHandler.Receive(Sustenet.Transport.BaseClient, System.Net.Sockets.TcpClient)
  type: Method
  source:
    remote:
      path: src/Transport/BaseClient.cs
      branch: production-prep
      repo: git@github.com:Quaint-Studios/Sustenet.git
    id: Receive
    path: src/Transport/BaseClient.cs
    startLine: 72
  assemblies:
  - Sustenet
  namespace: Sustenet.Transport
  summary: "\nUsed for servers that create local records of clients.\nIt will wipe any existing connections and start a new one.\n"
  example: []
  syntax:
    content: public void Receive(BaseClient client, TcpClient _socket)
    parameters:
    - id: client
      type: Sustenet.Transport.BaseClient
    - id: _socket
      type: System.Net.Sockets.TcpClient
      description: The socket to replace the current socket with.
    content.vb: Public Sub Receive(client As BaseClient, _socket As TcpClient)
  overload: Sustenet.Transport.BaseClient.TcpHandler.Receive*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sustenet.Transport.BaseClient.TcpHandler.ReceiveCallback(System.IAsyncResult)
  commentId: M:Sustenet.Transport.BaseClient.TcpHandler.ReceiveCallback(System.IAsyncResult)
  id: ReceiveCallback(System.IAsyncResult)
  parent: Sustenet.Transport.BaseClient.TcpHandler
  langs:
  - csharp
  - vb
  name: ReceiveCallback(IAsyncResult)
  nameWithType: BaseClient.TcpHandler.ReceiveCallback(IAsyncResult)
  fullName: Sustenet.Transport.BaseClient.TcpHandler.ReceiveCallback(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/Transport/BaseClient.cs
      branch: production-prep
      repo: git@github.com:Quaint-Studios/Sustenet.git
    id: ReceiveCallback
    path: src/Transport/BaseClient.cs
    startLine: 107
  assemblies:
  - Sustenet
  namespace: Sustenet.Transport
  summary: "\nWhen the current stream receives data.\n"
  example: []
  syntax:
    content: public void ReceiveCallback(IAsyncResult ar)
    parameters:
    - id: ar
      type: System.IAsyncResult
      description: The result of BeginRead().
    content.vb: Public Sub ReceiveCallback(ar As IAsyncResult)
  overload: Sustenet.Transport.BaseClient.TcpHandler.ReceiveCallback*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sustenet.Transport.BaseClient.TcpHandler.Connect(Sustenet.Transport.BaseClient,System.Net.IPAddress,System.UInt16)
  commentId: M:Sustenet.Transport.BaseClient.TcpHandler.Connect(Sustenet.Transport.BaseClient,System.Net.IPAddress,System.UInt16)
  id: Connect(Sustenet.Transport.BaseClient,System.Net.IPAddress,System.UInt16)
  parent: Sustenet.Transport.BaseClient.TcpHandler
  langs:
  - csharp
  - vb
  name: Connect(BaseClient, IPAddress, UInt16)
  nameWithType: BaseClient.TcpHandler.Connect(BaseClient, IPAddress, UInt16)
  fullName: Sustenet.Transport.BaseClient.TcpHandler.Connect(Sustenet.Transport.BaseClient, System.Net.IPAddress, System.UInt16)
  type: Method
  source:
    remote:
      path: src/Transport/BaseClient.cs
      branch: production-prep
      repo: git@github.com:Quaint-Studios/Sustenet.git
    id: Connect
    path: src/Transport/BaseClient.cs
    startLine: 149
  assemblies:
  - Sustenet
  namespace: Sustenet.Transport
  summary: "\nConnects to a server.\n"
  example: []
  syntax:
    content: public void Connect(BaseClient client, IPAddress ip, ushort port)
    parameters:
    - id: client
      type: Sustenet.Transport.BaseClient
    - id: ip
      type: System.Net.IPAddress
      description: The IP address.
    - id: port
      type: System.UInt16
      description: The port number.
    content.vb: Public Sub Connect(client As BaseClient, ip As IPAddress, port As UShort)
  overload: Sustenet.Transport.BaseClient.TcpHandler.Connect*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sustenet.Transport.BaseClient.TcpHandler.ConnectCallback(System.IAsyncResult,System.Net.IPAddress)
  commentId: M:Sustenet.Transport.BaseClient.TcpHandler.ConnectCallback(System.IAsyncResult,System.Net.IPAddress)
  id: ConnectCallback(System.IAsyncResult,System.Net.IPAddress)
  parent: Sustenet.Transport.BaseClient.TcpHandler
  langs:
  - csharp
  - vb
  name: ConnectCallback(IAsyncResult, IPAddress)
  nameWithType: BaseClient.TcpHandler.ConnectCallback(IAsyncResult, IPAddress)
  fullName: Sustenet.Transport.BaseClient.TcpHandler.ConnectCallback(System.IAsyncResult, System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: src/Transport/BaseClient.cs
      branch: production-prep
      repo: git@github.com:Quaint-Studios/Sustenet.git
    id: ConnectCallback
    path: src/Transport/BaseClient.cs
    startLine: 179
  assemblies:
  - Sustenet
  namespace: Sustenet.Transport
  summary: "\nTriggered after BeginConnect().\n"
  example: []
  syntax:
    content: public void ConnectCallback(IAsyncResult ar, IPAddress ip)
    parameters:
    - id: ar
      type: System.IAsyncResult
      description: Result from BeginConnect().
    - id: ip
      type: System.Net.IPAddress
    content.vb: Public Sub ConnectCallback(ar As IAsyncResult, ip As IPAddress)
  overload: Sustenet.Transport.BaseClient.TcpHandler.ConnectCallback*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sustenet.Transport.BaseClient.TcpHandler.Dispose(System.Boolean)
  commentId: M:Sustenet.Transport.BaseClient.TcpHandler.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Sustenet.Transport.BaseClient.TcpHandler
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: BaseClient.TcpHandler.Dispose(Boolean)
  fullName: Sustenet.Transport.BaseClient.TcpHandler.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Transport/BaseClient.cs
      branch: production-prep
      repo: git@github.com:Quaint-Studios/Sustenet.git
    id: Dispose
    path: src/Transport/BaseClient.cs
    startLine: 221
  assemblies:
  - Sustenet
  namespace: Sustenet.Transport
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: Sustenet.Transport.BaseClient.TcpHandler.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Sustenet.Transport.BaseClient.TcpHandler.Dispose
  commentId: M:Sustenet.Transport.BaseClient.TcpHandler.Dispose
  id: Dispose
  parent: Sustenet.Transport.BaseClient.TcpHandler
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: BaseClient.TcpHandler.Dispose()
  fullName: Sustenet.Transport.BaseClient.TcpHandler.Dispose()
  type: Method
  source:
    remote:
      path: src/Transport/BaseClient.cs
      branch: production-prep
      repo: git@github.com:Quaint-Studios/Sustenet.git
    id: Dispose
    path: src/Transport/BaseClient.cs
    startLine: 235
  assemblies:
  - Sustenet
  namespace: Sustenet.Transport
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Sustenet.Transport.BaseClient.TcpHandler.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Sustenet.Transport
  commentId: N:Sustenet.Transport
  name: Sustenet.Transport
  nameWithType: Sustenet.Transport
  fullName: Sustenet.Transport
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sustenet.Transport.BaseClient.TcpHandler.Receive*
  commentId: Overload:Sustenet.Transport.BaseClient.TcpHandler.Receive
  name: Receive
  nameWithType: BaseClient.TcpHandler.Receive
  fullName: Sustenet.Transport.BaseClient.TcpHandler.Receive
- uid: Sustenet.Transport.BaseClient
  commentId: T:Sustenet.Transport.BaseClient
  parent: Sustenet.Transport
  name: BaseClient
  nameWithType: BaseClient
  fullName: Sustenet.Transport.BaseClient
- uid: System.Net.Sockets.TcpClient
  commentId: T:System.Net.Sockets.TcpClient
  parent: System.Net.Sockets
  isExternal: true
  name: TcpClient
  nameWithType: TcpClient
  fullName: System.Net.Sockets.TcpClient
- uid: System.Net.Sockets
  commentId: N:System.Net.Sockets
  isExternal: true
  name: System.Net.Sockets
  nameWithType: System.Net.Sockets
  fullName: System.Net.Sockets
- uid: Sustenet.Transport.BaseClient.TcpHandler.ReceiveCallback*
  commentId: Overload:Sustenet.Transport.BaseClient.TcpHandler.ReceiveCallback
  name: ReceiveCallback
  nameWithType: BaseClient.TcpHandler.ReceiveCallback
  fullName: Sustenet.Transport.BaseClient.TcpHandler.ReceiveCallback
- uid: System.IAsyncResult
  commentId: T:System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: Sustenet.Transport.BaseClient.TcpHandler.Connect*
  commentId: Overload:Sustenet.Transport.BaseClient.TcpHandler.Connect
  name: Connect
  nameWithType: BaseClient.TcpHandler.Connect
  fullName: Sustenet.Transport.BaseClient.TcpHandler.Connect
- uid: System.Net.IPAddress
  commentId: T:System.Net.IPAddress
  parent: System.Net
  isExternal: true
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.Net
  commentId: N:System.Net
  isExternal: true
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: Sustenet.Transport.BaseClient.TcpHandler.ConnectCallback*
  commentId: Overload:Sustenet.Transport.BaseClient.TcpHandler.ConnectCallback
  name: ConnectCallback
  nameWithType: BaseClient.TcpHandler.ConnectCallback
  fullName: Sustenet.Transport.BaseClient.TcpHandler.ConnectCallback
- uid: Sustenet.Transport.BaseClient.TcpHandler.Dispose*
  commentId: Overload:Sustenet.Transport.BaseClient.TcpHandler.Dispose
  name: Dispose
  nameWithType: BaseClient.TcpHandler.Dispose
  fullName: Sustenet.Transport.BaseClient.TcpHandler.Dispose
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
