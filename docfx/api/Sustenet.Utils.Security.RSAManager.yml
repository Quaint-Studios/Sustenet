### YamlMime:ManagedReference
items:
- uid: Sustenet.Utils.Security.RSAManager
  commentId: T:Sustenet.Utils.Security.RSAManager
  id: RSAManager
  parent: Sustenet.Utils.Security
  children:
  - Sustenet.Utils.Security.RSAManager.Decrypt(System.String,System.String)
  - Sustenet.Utils.Security.RSAManager.Encrypt(System.String,System.String)
  - Sustenet.Utils.Security.RSAManager.GenerateKeyPair(System.String,System.Int32)
  - Sustenet.Utils.Security.RSAManager.KeyExists(System.String,Sustenet.Utils.Security.RSAManager.KeyType)
  - Sustenet.Utils.Security.RSAManager.LoadKey(System.String,Sustenet.Utils.Security.RSAManager.KeyType,System.Xml.Serialization.XmlSerializer)
  - Sustenet.Utils.Security.RSAManager.LoadKeys
  - Sustenet.Utils.Security.RSAManager.LoadPrivKeys(System.Xml.Serialization.XmlSerializer)
  - Sustenet.Utils.Security.RSAManager.LoadPubKeys(System.Xml.Serialization.XmlSerializer)
  - Sustenet.Utils.Security.RSAManager.SaveKeyPair(System.String,System.Security.Cryptography.RSAParameters,System.Security.Cryptography.RSAParameters)
  langs:
  - csharp
  - vb
  name: RSAManager
  nameWithType: RSAManager
  fullName: Sustenet.Utils.Security.RSAManager
  type: Class
  source:
    remote:
      path: src/Utils/Security/RSAManager.cs
      branch: production-prep
      repo: git@github.com:Quaint-Studios/Sustenet.git
    id: RSAManager
    path: src/Utils/Security/RSAManager.cs
    startLine: 26
  assemblies:
  - Sustenet
  namespace: Sustenet.Utils.Security
  syntax:
    content: public static class RSAManager
    content.vb: Public Module RSAManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Sustenet.Utils.Security.RSAManager.GenerateKeyPair(System.String,System.Int32)
  commentId: M:Sustenet.Utils.Security.RSAManager.GenerateKeyPair(System.String,System.Int32)
  id: GenerateKeyPair(System.String,System.Int32)
  parent: Sustenet.Utils.Security.RSAManager
  langs:
  - csharp
  - vb
  name: GenerateKeyPair(String, Int32)
  nameWithType: RSAManager.GenerateKeyPair(String, Int32)
  fullName: Sustenet.Utils.Security.RSAManager.GenerateKeyPair(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/Utils/Security/RSAManager.cs
      branch: production-prep
      repo: git@github.com:Quaint-Studios/Sustenet.git
    id: GenerateKeyPair
    path: src/Utils/Security/RSAManager.cs
    startLine: 74
  assemblies:
  - Sustenet
  namespace: Sustenet.Utils.Security
  summary: "\nGenerates an RSA public and private key pair.\n"
  example: []
  syntax:
    content: public static void GenerateKeyPair(string keyName, int bit = 4096)
    parameters:
    - id: keyName
      type: System.String
      description: The name to save the key as.
    - id: bit
      type: System.Int32
      description: The bit encryption.
    content.vb: Public Shared Sub GenerateKeyPair(keyName As String, bit As Integer = 4096)
  overload: Sustenet.Utils.Security.RSAManager.GenerateKeyPair*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sustenet.Utils.Security.RSAManager.SaveKeyPair(System.String,System.Security.Cryptography.RSAParameters,System.Security.Cryptography.RSAParameters)
  commentId: M:Sustenet.Utils.Security.RSAManager.SaveKeyPair(System.String,System.Security.Cryptography.RSAParameters,System.Security.Cryptography.RSAParameters)
  id: SaveKeyPair(System.String,System.Security.Cryptography.RSAParameters,System.Security.Cryptography.RSAParameters)
  parent: Sustenet.Utils.Security.RSAManager
  langs:
  - csharp
  - vb
  name: SaveKeyPair(String, RSAParameters, RSAParameters)
  nameWithType: RSAManager.SaveKeyPair(String, RSAParameters, RSAParameters)
  fullName: Sustenet.Utils.Security.RSAManager.SaveKeyPair(System.String, System.Security.Cryptography.RSAParameters, System.Security.Cryptography.RSAParameters)
  type: Method
  source:
    remote:
      path: src/Utils/Security/RSAManager.cs
      branch: production-prep
      repo: git@github.com:Quaint-Studios/Sustenet.git
    id: SaveKeyPair
    path: src/Utils/Security/RSAManager.cs
    startLine: 93
  assemblies:
  - Sustenet
  namespace: Sustenet.Utils.Security
  summary: "\nSaves a key pair.\n"
  example: []
  syntax:
    content: public static void SaveKeyPair(string keyName, RSAParameters privKey, RSAParameters pubKey)
    parameters:
    - id: keyName
      type: System.String
      description: The name of the key.
    - id: privKey
      type: System.Security.Cryptography.RSAParameters
      description: The private key.
    - id: pubKey
      type: System.Security.Cryptography.RSAParameters
      description: The public key.
    content.vb: Public Shared Sub SaveKeyPair(keyName As String, privKey As RSAParameters, pubKey As RSAParameters)
  overload: Sustenet.Utils.Security.RSAManager.SaveKeyPair*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sustenet.Utils.Security.RSAManager.LoadKeys
  commentId: M:Sustenet.Utils.Security.RSAManager.LoadKeys
  id: LoadKeys
  parent: Sustenet.Utils.Security.RSAManager
  langs:
  - csharp
  - vb
  name: LoadKeys()
  nameWithType: RSAManager.LoadKeys()
  fullName: Sustenet.Utils.Security.RSAManager.LoadKeys()
  type: Method
  source:
    remote:
      path: src/Utils/Security/RSAManager.cs
      branch: production-prep
      repo: git@github.com:Quaint-Studios/Sustenet.git
    id: LoadKeys
    path: src/Utils/Security/RSAManager.cs
    startLine: 113
  assemblies:
  - Sustenet
  namespace: Sustenet.Utils.Security
  summary: "\nLoads all public and private keys.\n"
  example: []
  syntax:
    content: public static void LoadKeys()
    content.vb: Public Shared Sub LoadKeys
  overload: Sustenet.Utils.Security.RSAManager.LoadKeys*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sustenet.Utils.Security.RSAManager.LoadPubKeys(System.Xml.Serialization.XmlSerializer)
  commentId: M:Sustenet.Utils.Security.RSAManager.LoadPubKeys(System.Xml.Serialization.XmlSerializer)
  id: LoadPubKeys(System.Xml.Serialization.XmlSerializer)
  parent: Sustenet.Utils.Security.RSAManager
  langs:
  - csharp
  - vb
  name: LoadPubKeys(XmlSerializer)
  nameWithType: RSAManager.LoadPubKeys(XmlSerializer)
  fullName: Sustenet.Utils.Security.RSAManager.LoadPubKeys(System.Xml.Serialization.XmlSerializer)
  type: Method
  source:
    remote:
      path: src/Utils/Security/RSAManager.cs
      branch: production-prep
      repo: git@github.com:Quaint-Studios/Sustenet.git
    id: LoadPubKeys
    path: src/Utils/Security/RSAManager.cs
    startLine: 125
  assemblies:
  - Sustenet
  namespace: Sustenet.Utils.Security
  summary: "\nLoads all public keys in ./cfg/keys/rsa/pub/\n"
  example: []
  syntax:
    content: public static void LoadPubKeys(XmlSerializer serializer = null)
    parameters:
    - id: serializer
      type: System.Xml.Serialization.XmlSerializer
      description: An optional serializer to use.
    content.vb: Public Shared Sub LoadPubKeys(serializer As XmlSerializer = Nothing)
  overload: Sustenet.Utils.Security.RSAManager.LoadPubKeys*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sustenet.Utils.Security.RSAManager.LoadPrivKeys(System.Xml.Serialization.XmlSerializer)
  commentId: M:Sustenet.Utils.Security.RSAManager.LoadPrivKeys(System.Xml.Serialization.XmlSerializer)
  id: LoadPrivKeys(System.Xml.Serialization.XmlSerializer)
  parent: Sustenet.Utils.Security.RSAManager
  langs:
  - csharp
  - vb
  name: LoadPrivKeys(XmlSerializer)
  nameWithType: RSAManager.LoadPrivKeys(XmlSerializer)
  fullName: Sustenet.Utils.Security.RSAManager.LoadPrivKeys(System.Xml.Serialization.XmlSerializer)
  type: Method
  source:
    remote:
      path: src/Utils/Security/RSAManager.cs
      branch: production-prep
      repo: git@github.com:Quaint-Studios/Sustenet.git
    id: LoadPrivKeys
    path: src/Utils/Security/RSAManager.cs
    startLine: 149
  assemblies:
  - Sustenet
  namespace: Sustenet.Utils.Security
  summary: "\nLoads all private keys in ./cfg/keys/rsa/priv/\n"
  example: []
  syntax:
    content: public static void LoadPrivKeys(XmlSerializer serializer = null)
    parameters:
    - id: serializer
      type: System.Xml.Serialization.XmlSerializer
      description: An optional serializer to use.
    content.vb: Public Shared Sub LoadPrivKeys(serializer As XmlSerializer = Nothing)
  overload: Sustenet.Utils.Security.RSAManager.LoadPrivKeys*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sustenet.Utils.Security.RSAManager.LoadKey(System.String,Sustenet.Utils.Security.RSAManager.KeyType,System.Xml.Serialization.XmlSerializer)
  commentId: M:Sustenet.Utils.Security.RSAManager.LoadKey(System.String,Sustenet.Utils.Security.RSAManager.KeyType,System.Xml.Serialization.XmlSerializer)
  id: LoadKey(System.String,Sustenet.Utils.Security.RSAManager.KeyType,System.Xml.Serialization.XmlSerializer)
  parent: Sustenet.Utils.Security.RSAManager
  langs:
  - csharp
  - vb
  name: LoadKey(String, RSAManager.KeyType, XmlSerializer)
  nameWithType: RSAManager.LoadKey(String, RSAManager.KeyType, XmlSerializer)
  fullName: Sustenet.Utils.Security.RSAManager.LoadKey(System.String, Sustenet.Utils.Security.RSAManager.KeyType, System.Xml.Serialization.XmlSerializer)
  type: Method
  source:
    remote:
      path: src/Utils/Security/RSAManager.cs
      branch: production-prep
      repo: git@github.com:Quaint-Studios/Sustenet.git
    id: LoadKey
    path: src/Utils/Security/RSAManager.cs
    startLine: 175
  assemblies:
  - Sustenet
  namespace: Sustenet.Utils.Security
  summary: "\nLoads a single RSA key.\n"
  example: []
  syntax:
    content: public static void LoadKey(string keyName, RSAManager.KeyType keyType, XmlSerializer serializer = null)
    parameters:
    - id: keyName
      type: System.String
      description: The name of the key to load.
    - id: keyType
      type: Sustenet.Utils.Security.RSAManager.KeyType
      description: The type of key to load.
    - id: serializer
      type: System.Xml.Serialization.XmlSerializer
      description: The serializer to use, if any.
    content.vb: Public Shared Sub LoadKey(keyName As String, keyType As RSAManager.KeyType, serializer As XmlSerializer = Nothing)
  overload: Sustenet.Utils.Security.RSAManager.LoadKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sustenet.Utils.Security.RSAManager.KeyExists(System.String,Sustenet.Utils.Security.RSAManager.KeyType)
  commentId: M:Sustenet.Utils.Security.RSAManager.KeyExists(System.String,Sustenet.Utils.Security.RSAManager.KeyType)
  id: KeyExists(System.String,Sustenet.Utils.Security.RSAManager.KeyType)
  parent: Sustenet.Utils.Security.RSAManager
  langs:
  - csharp
  - vb
  name: KeyExists(String, RSAManager.KeyType)
  nameWithType: RSAManager.KeyExists(String, RSAManager.KeyType)
  fullName: Sustenet.Utils.Security.RSAManager.KeyExists(System.String, Sustenet.Utils.Security.RSAManager.KeyType)
  type: Method
  source:
    remote:
      path: src/Utils/Security/RSAManager.cs
      branch: production-prep
      repo: git@github.com:Quaint-Studios/Sustenet.git
    id: KeyExists
    path: src/Utils/Security/RSAManager.cs
    startLine: 272
  assemblies:
  - Sustenet
  namespace: Sustenet.Utils.Security
  summary: "\nChecks if a key exists in either the pubkey or privkey dictionaries.\n"
  example: []
  syntax:
    content: public static bool KeyExists(string keyName, RSAManager.KeyType keyType = RSAManager.KeyType.PublicKey)
    parameters:
    - id: keyName
      type: System.String
      description: The name of the key to check for.
    - id: keyType
      type: Sustenet.Utils.Security.RSAManager.KeyType
      description: The type of key to check for.
    return:
      type: System.Boolean
    content.vb: Public Shared Function KeyExists(keyName As String, keyType As RSAManager.KeyType = RSAManager.KeyType.PublicKey) As Boolean
  overload: Sustenet.Utils.Security.RSAManager.KeyExists*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sustenet.Utils.Security.RSAManager.Encrypt(System.String,System.String)
  commentId: M:Sustenet.Utils.Security.RSAManager.Encrypt(System.String,System.String)
  id: Encrypt(System.String,System.String)
  parent: Sustenet.Utils.Security.RSAManager
  langs:
  - csharp
  - vb
  name: Encrypt(String, String)
  nameWithType: RSAManager.Encrypt(String, String)
  fullName: Sustenet.Utils.Security.RSAManager.Encrypt(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Utils/Security/RSAManager.cs
      branch: production-prep
      repo: git@github.com:Quaint-Studios/Sustenet.git
    id: Encrypt
    path: src/Utils/Security/RSAManager.cs
    startLine: 283
  assemblies:
  - Sustenet
  namespace: Sustenet.Utils.Security
  summary: "\nEncrypts a string of data and converts it to Base64.\n"
  example: []
  syntax:
    content: public static string Encrypt(string keyName, string data)
    parameters:
    - id: keyName
      type: System.String
      description: The public or private key to use to encrypt data.
    - id: data
      type: System.String
      description: The string to encrypt.
    return:
      type: System.String
      description: An encrypted base64 string.
    content.vb: Public Shared Function Encrypt(keyName As String, data As String) As String
  overload: Sustenet.Utils.Security.RSAManager.Encrypt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sustenet.Utils.Security.RSAManager.Decrypt(System.String,System.String)
  commentId: M:Sustenet.Utils.Security.RSAManager.Decrypt(System.String,System.String)
  id: Decrypt(System.String,System.String)
  parent: Sustenet.Utils.Security.RSAManager
  langs:
  - csharp
  - vb
  name: Decrypt(String, String)
  nameWithType: RSAManager.Decrypt(String, String)
  fullName: Sustenet.Utils.Security.RSAManager.Decrypt(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Utils/Security/RSAManager.cs
      branch: production-prep
      repo: git@github.com:Quaint-Studios/Sustenet.git
    id: Decrypt
    path: src/Utils/Security/RSAManager.cs
    startLine: 316
  assemblies:
  - Sustenet
  namespace: Sustenet.Utils.Security
  summary: "\nDecrypts an encrypted string with the provided key.\n"
  example: []
  syntax:
    content: public static string Decrypt(string keyName, string data)
    parameters:
    - id: keyName
      type: System.String
      description: The private key to decrypt with.
    - id: data
      type: System.String
      description: The Base64 data to decrypt.
    return:
      type: System.String
      description: A decrypted string.
    content.vb: Public Shared Function Decrypt(keyName As String, data As String) As String
  overload: Sustenet.Utils.Security.RSAManager.Decrypt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Sustenet.Utils.Security
  commentId: N:Sustenet.Utils.Security
  name: Sustenet.Utils.Security
  nameWithType: Sustenet.Utils.Security
  fullName: Sustenet.Utils.Security
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sustenet.Utils.Security.RSAManager.GenerateKeyPair*
  commentId: Overload:Sustenet.Utils.Security.RSAManager.GenerateKeyPair
  name: GenerateKeyPair
  nameWithType: RSAManager.GenerateKeyPair
  fullName: Sustenet.Utils.Security.RSAManager.GenerateKeyPair
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sustenet.Utils.Security.RSAManager.SaveKeyPair*
  commentId: Overload:Sustenet.Utils.Security.RSAManager.SaveKeyPair
  name: SaveKeyPair
  nameWithType: RSAManager.SaveKeyPair
  fullName: Sustenet.Utils.Security.RSAManager.SaveKeyPair
- uid: System.Security.Cryptography.RSAParameters
  commentId: T:System.Security.Cryptography.RSAParameters
  parent: System.Security.Cryptography
  isExternal: true
  name: RSAParameters
  nameWithType: RSAParameters
  fullName: System.Security.Cryptography.RSAParameters
- uid: System.Security.Cryptography
  commentId: N:System.Security.Cryptography
  isExternal: true
  name: System.Security.Cryptography
  nameWithType: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: Sustenet.Utils.Security.RSAManager.LoadKeys*
  commentId: Overload:Sustenet.Utils.Security.RSAManager.LoadKeys
  name: LoadKeys
  nameWithType: RSAManager.LoadKeys
  fullName: Sustenet.Utils.Security.RSAManager.LoadKeys
- uid: Sustenet.Utils.Security.RSAManager.LoadPubKeys*
  commentId: Overload:Sustenet.Utils.Security.RSAManager.LoadPubKeys
  name: LoadPubKeys
  nameWithType: RSAManager.LoadPubKeys
  fullName: Sustenet.Utils.Security.RSAManager.LoadPubKeys
- uid: System.Xml.Serialization.XmlSerializer
  commentId: T:System.Xml.Serialization.XmlSerializer
  parent: System.Xml.Serialization
  isExternal: true
  name: XmlSerializer
  nameWithType: XmlSerializer
  fullName: System.Xml.Serialization.XmlSerializer
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: true
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: Sustenet.Utils.Security.RSAManager.LoadPrivKeys*
  commentId: Overload:Sustenet.Utils.Security.RSAManager.LoadPrivKeys
  name: LoadPrivKeys
  nameWithType: RSAManager.LoadPrivKeys
  fullName: Sustenet.Utils.Security.RSAManager.LoadPrivKeys
- uid: Sustenet.Utils.Security.RSAManager.LoadKey*
  commentId: Overload:Sustenet.Utils.Security.RSAManager.LoadKey
  name: LoadKey
  nameWithType: RSAManager.LoadKey
  fullName: Sustenet.Utils.Security.RSAManager.LoadKey
- uid: Sustenet.Utils.Security.RSAManager.KeyType
  commentId: T:Sustenet.Utils.Security.RSAManager.KeyType
  parent: Sustenet.Utils.Security
  name: RSAManager.KeyType
  nameWithType: RSAManager.KeyType
  fullName: Sustenet.Utils.Security.RSAManager.KeyType
- uid: Sustenet.Utils.Security.RSAManager.KeyExists*
  commentId: Overload:Sustenet.Utils.Security.RSAManager.KeyExists
  name: KeyExists
  nameWithType: RSAManager.KeyExists
  fullName: Sustenet.Utils.Security.RSAManager.KeyExists
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sustenet.Utils.Security.RSAManager.Encrypt*
  commentId: Overload:Sustenet.Utils.Security.RSAManager.Encrypt
  name: Encrypt
  nameWithType: RSAManager.Encrypt
  fullName: Sustenet.Utils.Security.RSAManager.Encrypt
- uid: Sustenet.Utils.Security.RSAManager.Decrypt*
  commentId: Overload:Sustenet.Utils.Security.RSAManager.Decrypt
  name: Decrypt
  nameWithType: RSAManager.Decrypt
  fullName: Sustenet.Utils.Security.RSAManager.Decrypt
